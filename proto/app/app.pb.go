// Code generated by protoc-gen-go.
// source: app.proto
// DO NOT EDIT!

/*
Package app is a generated protocol buffer package.

It is generated from these files:
	app.proto

It has these top-level messages:
	SubRequest
	KillReply
	AppDesc
	AppIndex
	DeregReply
	AppStatus
	Process
	ProcList
	AppProcs
	TRequest
	TReply
*/
package app

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubRequest struct {
	// Command to  the app
	ExecName string `protobuf:"bytes,1,opt,name=ExecName,json=execName" json:"ExecName,omitempty"`
	// Command to  the app
	ExecArgs []string `protobuf:"bytes,2,rep,name=ExecArgs,json=execArgs" json:"ExecArgs,omitempty"`
	// IP address of the node to launch the app
	Ip string `protobuf:"bytes,3,opt,name=Ip,json=ip" json:"Ip,omitempty"`
}

func (m *SubRequest) Reset()                    { *m = SubRequest{} }
func (m *SubRequest) String() string            { return proto.CompactTextString(m) }
func (*SubRequest) ProtoMessage()               {}
func (*SubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type KillReply struct {
}

func (m *KillReply) Reset()                    { *m = KillReply{} }
func (m *KillReply) String() string            { return proto.CompactTextString(m) }
func (*KillReply) ProtoMessage()               {}
func (*KillReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Application description used to register an app
type AppDesc struct {
	// Entry Process id
	EntryPid int32 `protobuf:"varint,1,opt,name=EntryPid,json=entryPid" json:"EntryPid,omitempty"`
	// Entry node IP address
	EntryNode string `protobuf:"bytes,2,opt,name=EntryNode,json=entryNode" json:"EntryNode,omitempty"`
	// Frameworks used by the application
	Frameworks []string `protobuf:"bytes,3,rep,name=Frameworks,json=frameworks" json:"Frameworks,omitempty"`
	// The JobIds given by corresponding frameworks
	JobIds []string `protobuf:"bytes,4,rep,name=JobIds,json=jobIds" json:"JobIds,omitempty"`
}

func (m *AppDesc) Reset()                    { *m = AppDesc{} }
func (m *AppDesc) String() string            { return proto.CompactTextString(m) }
func (*AppDesc) ProtoMessage()               {}
func (*AppDesc) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Application index
type AppIndex struct {
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *AppIndex) Reset()                    { *m = AppIndex{} }
func (m *AppIndex) String() string            { return proto.CompactTextString(m) }
func (*AppIndex) ProtoMessage()               {}
func (*AppIndex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Deregister reply
type DeregReply struct {
}

func (m *DeregReply) Reset()                    { *m = DeregReply{} }
func (m *DeregReply) String() string            { return proto.CompactTextString(m) }
func (*DeregReply) ProtoMessage()               {}
func (*DeregReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// Application status
type AppStatus struct {
	// Command used to execute the application
	Cmd string `protobuf:"bytes,1,opt,name=Cmd,json=cmd" json:"Cmd,omitempty"`
	// Status: running, finished
	Status string `protobuf:"bytes,2,opt,name=Status,json=status" json:"Status,omitempty"`
	// Start time of the application
	StartTime *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=StartTime,json=startTime" json:"StartTime,omitempty"`
	// Execution time until now
	ExecTime *google_protobuf1.Duration `protobuf:"bytes,4,opt,name=ExecTime,json=execTime" json:"ExecTime,omitempty"`
}

func (m *AppStatus) Reset()                    { *m = AppStatus{} }
func (m *AppStatus) String() string            { return proto.CompactTextString(m) }
func (*AppStatus) ProtoMessage()               {}
func (*AppStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AppStatus) GetStartTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *AppStatus) GetExecTime() *google_protobuf1.Duration {
	if m != nil {
		return m.ExecTime
	}
	return nil
}

type Process struct {
	// Process's operating system pid
	Pid int32 `protobuf:"varint,1,opt,name=Pid,json=pid" json:"Pid,omitempty"`
	// Process name
	Name string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	// Command line to run the process
	Cmd string `protobuf:"bytes,3,opt,name=Cmd,json=cmd" json:"Cmd,omitempty"`
}

func (m *Process) Reset()                    { *m = Process{} }
func (m *Process) String() string            { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()               {}
func (*Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// Process list
type ProcList struct {
	Procs []*Process `protobuf:"bytes,1,rep,name=Procs,json=procs" json:"Procs,omitempty"`
}

func (m *ProcList) Reset()                    { *m = ProcList{} }
func (m *ProcList) String() string            { return proto.CompactTextString(m) }
func (*ProcList) ProtoMessage()               {}
func (*ProcList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProcList) GetProcs() []*Process {
	if m != nil {
		return m.Procs
	}
	return nil
}

// Application's processes, organized by nodes
type AppProcs struct {
	// (key, value) = (node, process list)
	NodeProcs map[string]*ProcList `protobuf:"bytes,1,rep,name=NodeProcs,json=nodeProcs" json:"NodeProcs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AppProcs) Reset()                    { *m = AppProcs{} }
func (m *AppProcs) String() string            { return proto.CompactTextString(m) }
func (*AppProcs) ProtoMessage()               {}
func (*AppProcs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AppProcs) GetNodeProcs() map[string]*ProcList {
	if m != nil {
		return m.NodeProcs
	}
	return nil
}

type TRequest struct {
}

func (m *TRequest) Reset()                    { *m = TRequest{} }
func (m *TRequest) String() string            { return proto.CompactTextString(m) }
func (*TRequest) ProtoMessage()               {}
func (*TRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type TReply struct {
}

func (m *TReply) Reset()                    { *m = TReply{} }
func (m *TReply) String() string            { return proto.CompactTextString(m) }
func (*TReply) ProtoMessage()               {}
func (*TReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*SubRequest)(nil), "app.SubRequest")
	proto.RegisterType((*KillReply)(nil), "app.KillReply")
	proto.RegisterType((*AppDesc)(nil), "app.AppDesc")
	proto.RegisterType((*AppIndex)(nil), "app.AppIndex")
	proto.RegisterType((*DeregReply)(nil), "app.DeregReply")
	proto.RegisterType((*AppStatus)(nil), "app.AppStatus")
	proto.RegisterType((*Process)(nil), "app.Process")
	proto.RegisterType((*ProcList)(nil), "app.ProcList")
	proto.RegisterType((*AppProcs)(nil), "app.AppProcs")
	proto.RegisterType((*TRequest)(nil), "app.TRequest")
	proto.RegisterType((*TReply)(nil), "app.TReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AppGauge service

type AppGaugeClient interface {
	// Submit an application
	Submit(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*AppIndex, error)
	// Kill an application
	Kill(ctx context.Context, in *AppIndex, opts ...grpc.CallOption) (*KillReply, error)
	// Register an application
	Register(ctx context.Context, in *AppDesc, opts ...grpc.CallOption) (*AppIndex, error)
	// Deregister an app
	Deregister(ctx context.Context, in *AppIndex, opts ...grpc.CallOption) (*DeregReply, error)
	// Get the running status of an app
	GetStatus(ctx context.Context, in *AppIndex, opts ...grpc.CallOption) (*AppStatus, error)
	// Get all the processes of an app
	GetProcesses(ctx context.Context, in *AppIndex, opts ...grpc.CallOption) (*AppProcs, error)
	// Test
	Test(ctx context.Context, in *TRequest, opts ...grpc.CallOption) (*TReply, error)
}

type appGaugeClient struct {
	cc *grpc.ClientConn
}

func NewAppGaugeClient(cc *grpc.ClientConn) AppGaugeClient {
	return &appGaugeClient{cc}
}

func (c *appGaugeClient) Submit(ctx context.Context, in *SubRequest, opts ...grpc.CallOption) (*AppIndex, error) {
	out := new(AppIndex)
	err := grpc.Invoke(ctx, "/app.AppGauge/Submit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appGaugeClient) Kill(ctx context.Context, in *AppIndex, opts ...grpc.CallOption) (*KillReply, error) {
	out := new(KillReply)
	err := grpc.Invoke(ctx, "/app.AppGauge/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appGaugeClient) Register(ctx context.Context, in *AppDesc, opts ...grpc.CallOption) (*AppIndex, error) {
	out := new(AppIndex)
	err := grpc.Invoke(ctx, "/app.AppGauge/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appGaugeClient) Deregister(ctx context.Context, in *AppIndex, opts ...grpc.CallOption) (*DeregReply, error) {
	out := new(DeregReply)
	err := grpc.Invoke(ctx, "/app.AppGauge/Deregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appGaugeClient) GetStatus(ctx context.Context, in *AppIndex, opts ...grpc.CallOption) (*AppStatus, error) {
	out := new(AppStatus)
	err := grpc.Invoke(ctx, "/app.AppGauge/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appGaugeClient) GetProcesses(ctx context.Context, in *AppIndex, opts ...grpc.CallOption) (*AppProcs, error) {
	out := new(AppProcs)
	err := grpc.Invoke(ctx, "/app.AppGauge/GetProcesses", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appGaugeClient) Test(ctx context.Context, in *TRequest, opts ...grpc.CallOption) (*TReply, error) {
	out := new(TReply)
	err := grpc.Invoke(ctx, "/app.AppGauge/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppGauge service

type AppGaugeServer interface {
	// Submit an application
	Submit(context.Context, *SubRequest) (*AppIndex, error)
	// Kill an application
	Kill(context.Context, *AppIndex) (*KillReply, error)
	// Register an application
	Register(context.Context, *AppDesc) (*AppIndex, error)
	// Deregister an app
	Deregister(context.Context, *AppIndex) (*DeregReply, error)
	// Get the running status of an app
	GetStatus(context.Context, *AppIndex) (*AppStatus, error)
	// Get all the processes of an app
	GetProcesses(context.Context, *AppIndex) (*AppProcs, error)
	// Test
	Test(context.Context, *TRequest) (*TReply, error)
}

func RegisterAppGaugeServer(s *grpc.Server, srv AppGaugeServer) {
	s.RegisterService(&_AppGauge_serviceDesc, srv)
}

func _AppGauge_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppGaugeServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppGauge/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppGaugeServer).Submit(ctx, req.(*SubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppGauge_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppGaugeServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppGauge/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppGaugeServer).Kill(ctx, req.(*AppIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppGauge_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDesc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppGaugeServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppGauge/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppGaugeServer).Register(ctx, req.(*AppDesc))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppGauge_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppGaugeServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppGauge/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppGaugeServer).Deregister(ctx, req.(*AppIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppGauge_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppGaugeServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppGauge/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppGaugeServer).GetStatus(ctx, req.(*AppIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppGauge_GetProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIndex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppGaugeServer).GetProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppGauge/GetProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppGaugeServer).GetProcesses(ctx, req.(*AppIndex))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppGauge_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppGaugeServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.AppGauge/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppGaugeServer).Test(ctx, req.(*TRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppGauge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "app.AppGauge",
	HandlerType: (*AppGaugeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _AppGauge_Submit_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _AppGauge_Kill_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _AppGauge_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _AppGauge_Deregister_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _AppGauge_GetStatus_Handler,
		},
		{
			MethodName: "GetProcesses",
			Handler:    _AppGauge_GetProcesses_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _AppGauge_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("app.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x53, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x6d, 0x93, 0xb6, 0x4b, 0x6e, 0xbb, 0x81, 0xfc, 0x03, 0x85, 0x68, 0x1a, 0x93, 0x41, 0x62,
	0x20, 0x94, 0x49, 0x45, 0x48, 0xd3, 0xfe, 0x55, 0x0c, 0xa6, 0x31, 0x34, 0x4d, 0x69, 0x5f, 0x20,
	0x6d, 0xee, 0xa2, 0xb0, 0xa6, 0x31, 0xb1, 0x03, 0xab, 0x78, 0x0c, 0xde, 0x81, 0xc7, 0xe0, 0xd9,
	0x90, 0xaf, 0xed, 0xee, 0x8b, 0x7f, 0xb9, 0x3e, 0xe7, 0x5e, 0x1f, 0xdf, 0x73, 0x02, 0x61, 0x26,
	0x44, 0x22, 0x9a, 0x5a, 0xd5, 0xcc, 0xcf, 0x84, 0x88, 0x5f, 0x14, 0x75, 0x5d, 0x2c, 0xf1, 0x90,
	0x8e, 0xe6, 0xed, 0xd5, 0xa1, 0x2a, 0x2b, 0x94, 0x2a, 0xab, 0x2c, 0x2b, 0xde, 0x7b, 0x48, 0xc8,
	0xdb, 0x26, 0x53, 0x65, 0xbd, 0x32, 0x38, 0x9f, 0x01, 0x4c, 0xdb, 0x79, 0x8a, 0xdf, 0x5b, 0x94,
	0x8a, 0xc5, 0x10, 0x7c, 0xba, 0xc1, 0xc5, 0x45, 0x56, 0x61, 0xd4, 0xdd, 0xef, 0x1e, 0x84, 0x69,
	0x80, 0xb6, 0x76, 0xd8, 0xa4, 0x29, 0x64, 0xe4, 0xed, 0xfb, 0x0e, 0xd3, 0x35, 0xdb, 0x01, 0xef,
	0x4c, 0x44, 0x3e, 0x75, 0x78, 0xa5, 0xe0, 0x43, 0x08, 0xcf, 0xcb, 0xe5, 0x32, 0x45, 0xb1, 0x5c,
	0xf3, 0x5f, 0xb0, 0x35, 0x11, 0xe2, 0x04, 0xe5, 0x82, 0x66, 0xac, 0x54, 0xb3, 0xbe, 0x2c, 0x73,
	0x9a, 0xdf, 0x4f, 0x03, 0xb4, 0x35, 0xdb, 0x85, 0x90, 0xb0, 0x8b, 0x3a, 0xc7, 0xc8, 0xa3, 0x51,
	0x21, 0xba, 0x03, 0xb6, 0x07, 0xf0, 0xb9, 0xc9, 0x2a, 0xfc, 0x59, 0x37, 0xd7, 0x32, 0xf2, 0xe9,
	0x7e, 0xb8, 0xda, 0x9c, 0xb0, 0x67, 0x30, 0xf8, 0x52, 0xcf, 0xcf, 0x72, 0x19, 0xf5, 0x08, 0x1b,
	0x7c, 0xa3, 0x8a, 0xc7, 0x10, 0x4c, 0x84, 0x38, 0x5b, 0xe5, 0x78, 0x43, 0x2a, 0x73, 0xfb, 0x2e,
	0xaf, 0xcc, 0xf9, 0x08, 0xe0, 0x04, 0x1b, 0x2c, 0x8c, 0xcc, 0x3f, 0x5d, 0x08, 0x27, 0x42, 0x4c,
	0x55, 0xa6, 0x5a, 0xc9, 0x9e, 0x82, 0xff, 0xb1, 0x72, 0x64, 0x7f, 0x51, 0xe5, 0xfa, 0x06, 0x83,
	0x59, 0x71, 0x03, 0x69, 0x98, 0x47, 0x10, 0x4e, 0x55, 0xd6, 0xa8, 0x59, 0x59, 0x21, 0xad, 0x60,
	0x38, 0x8e, 0x13, 0xb3, 0xf5, 0xc4, 0x6d, 0x3d, 0x99, 0x39, 0x5b, 0xd2, 0x50, 0x3a, 0x32, 0xfb,
	0x60, 0x36, 0x4a, 0x8d, 0x3d, 0x6a, 0x7c, 0xfe, 0xa8, 0xf1, 0xc4, 0xda, 0x65, 0x96, 0xad, 0xa9,
	0x7c, 0x02, 0x5b, 0x97, 0x4d, 0xbd, 0x40, 0x49, 0x2a, 0x6f, 0x57, 0xe9, 0x8b, 0x32, 0x67, 0x0c,
	0x7a, 0xe4, 0x9e, 0xd1, 0xd8, 0x5b, 0x69, 0xe7, 0xec, 0x5b, 0xfc, 0xcd, 0x5b, 0x78, 0x02, 0x81,
	0x1e, 0xf1, 0xb5, 0x94, 0x8a, 0x71, 0xe8, 0xeb, 0x6f, 0x19, 0x75, 0xf7, 0xfd, 0x83, 0xe1, 0x78,
	0x94, 0xe8, 0x88, 0xd9, 0x0b, 0xd2, 0xbe, 0xd0, 0x10, 0xff, 0xdd, 0xa5, 0x35, 0x12, 0x8f, 0x1d,
	0x43, 0xa8, 0x2d, 0xb9, 0xdb, 0xb4, 0x4b, 0x4d, 0x8e, 0x91, 0x6c, 0x60, 0x32, 0x34, 0x0d, 0x57,
	0xae, 0x8e, 0xcf, 0x61, 0xe7, 0x3e, 0xa8, 0xc5, 0x5d, 0xe3, 0xda, 0x2d, 0xfa, 0x1a, 0xd7, 0xec,
	0x25, 0xf4, 0x7f, 0x64, 0xcb, 0xd6, 0xbc, 0x61, 0x38, 0xde, 0xde, 0x08, 0xd2, 0x72, 0x53, 0x83,
	0x1d, 0x7b, 0x47, 0x5d, 0x0e, 0x10, 0xcc, 0x6c, 0x72, 0x79, 0x00, 0x83, 0x19, 0xf9, 0x38, 0xfe,
	0xeb, 0x91, 0xd6, 0xd3, 0xac, 0x2d, 0x90, 0xbd, 0x85, 0xc1, 0xb4, 0x9d, 0x57, 0xa5, 0x62, 0x4f,
	0x68, 0xcc, 0x6d, 0xd6, 0xe3, 0x6d, 0xa7, 0x99, 0xc2, 0xc1, 0x3b, 0xec, 0x35, 0xf4, 0x74, 0x68,
	0xd9, 0x7d, 0x20, 0xde, 0xa1, 0xf2, 0x36, 0xce, 0x1d, 0xf6, 0x06, 0x82, 0x14, 0x8b, 0x52, 0x2a,
	0x6c, 0xd8, 0xc8, 0x91, 0x75, 0xbe, 0x1f, 0xcf, 0x4c, 0x6c, 0xc4, 0x0c, 0xf9, 0xc1, 0x64, 0x23,
	0xe9, 0x4e, 0x04, 0x3b, 0xec, 0x1d, 0x84, 0xa7, 0xa8, 0x6c, 0x06, 0xff, 0x2b, 0x64, 0x13, 0x51,
	0x9a, 0x3e, 0x3a, 0x45, 0x65, 0xbd, 0xc2, 0x47, 0x0d, 0xdb, 0xf7, 0x5c, 0xe1, 0x1d, 0xf6, 0x0a,
	0x7a, 0x33, 0xfd, 0x9b, 0x1b, 0xc0, 0xed, 0x2e, 0x1e, 0xba, 0x92, 0x34, 0xcc, 0x07, 0x14, 0xbe,
	0xf7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x01, 0x88, 0x13, 0xcd, 0x6c, 0x04, 0x00, 0x00,
}
