syntax = "proto3";

package agent;

// Interfaces exported by agent for monitoring applications
service MonitorProcs {
    // Launch an application
    rpc Launch(LchRequest) returns (LchReply) {}

    // Kill a launched application
    rpc Kill(KRequest) returns (KReply) {}

    // Manager registers an application, and agent responds
    // with the app's processes' info on the node.
    rpc Register(AppInfo) returns (RegReply) {}

    // Manager deregisters an application, and agent responds
    // with a success indicator.
    rpc Deregister(DeregRequest) returns (DeregReply) {}

    // Manager sends application info, and agent responds
    // with the app's processes' info on the node.
    rpc GetProcesses(ProcRequest) returns (ProcList) {}

    // Congigure called by manager to change agent's configurations
    rpc Configure(CfgRequest) returns (CfgReply) {}
}

message LchRequest {
    // Application's id
    string AppId = 1;
    // Executable binary's name
    string ExecName = 2;
    // Arguments of execution
    repeated string ExecArgs = 3;
	// Flag indicating if enalble application monitoring
    bool Moni = 4;
}

message LchReply {}

message KRequest {
    // Application's id
    string AppId = 1;
}

message KReply {}

message AppInfo {
    // Application's id
    string Id = 1;
    // Framework used
    repeated string Frameworks = 2;
    // The JobIds given by corresponding frameworks
    repeated string JobIds = 3;
    // Process pattern used to match processes
    string Pattern = 4;
	// Pid of the application's main process.
    // If it's set, then the process on the same node as
    // the target agent, otherwise not.
    int64 Pid = 5;
}

message Process {
    // Process's operating system pid
    int64 Pid = 1;
    // Process name
    string Name = 2;
    // Command line to run the process
    string Cmd = 3;
}

message ProcRequest {
    string AppId = 1;
}

message ProcList {
    repeated Process Procs = 1;
}

// Reply message of Register()
// 
message RegReply { }

// Request message of Deregister()
message DeregRequest {
    // Application's Id
    string AppId = 1;
    // Save application info flag.
    // If save is ture, storing monitored app's info in database;
    // Otherwise, dicard the info.
    bool Save = 2;
}

// Reply message of Deregister()
message DeregReply { } 

message CfgRequest {
    // Time interval of monitoring applications and system, unit: second
    int32 MoniInterval = 1;
}

message CfgReply {}
