// Code generated by protoc-gen-go.
// source: cluster.proto
// DO NOT EDIT!

/*
Package cluster is a generated protocol buffer package.

It is generated from these files:
	cluster.proto

It has these top-level messages:
	NodeInfo
*/
package cluster

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Cluster node inforamtion.
//
// Both manager and agents are treated as a node.
type NodeInfo struct {
	// Id of the node
	Id string `protobuf:"bytes,1,opt,name=Id,json=id" json:"Id,omitempty"`
	// IP address
	Ip string `protobuf:"bytes,2,opt,name=Ip,json=ip" json:"Ip,omitempty"`
	// IP address port
	Port int32 `protobuf:"varint,3,opt,name=Port,json=port" json:"Port,omitempty"`
	// The node's heartbeat value
	Heartbeat int32 `protobuf:"varint,4,opt,name=Heartbeat,json=heartbeat" json:"Heartbeat,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*NodeInfo)(nil), "cluster.NodeInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Membership service

type MembershipClient interface {
	// Agent push its node info to manager, and master responds
	// with its own node info.
	SayHi(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error)
}

type membershipClient struct {
	cc *grpc.ClientConn
}

func NewMembershipClient(cc *grpc.ClientConn) MembershipClient {
	return &membershipClient{cc}
}

func (c *membershipClient) SayHi(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*NodeInfo, error) {
	out := new(NodeInfo)
	err := grpc.Invoke(ctx, "/cluster.Membership/SayHi", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Membership service

type MembershipServer interface {
	// Agent push its node info to manager, and master responds
	// with its own node info.
	SayHi(context.Context, *NodeInfo) (*NodeInfo, error)
}

func RegisterMembershipServer(s *grpc.Server, srv MembershipServer) {
	s.RegisterService(&_Membership_serviceDesc, srv)
}

func _Membership_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembershipServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cluster.Membership/SayHi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembershipServer).SayHi(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Membership_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.Membership",
	HandlerType: (*MembershipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHi",
			Handler:    _Membership_SayHi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("cluster.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x29, 0x2d,
	0x2e, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x62, 0xb8,
	0x38, 0xfc, 0xf2, 0x53, 0x52, 0x3d, 0xf3, 0xd2, 0xf2, 0x85, 0xf8, 0xb8, 0x98, 0x3c, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x32, 0x53, 0xc0, 0xfc, 0x02, 0x09, 0x26, 0x28, 0xbf,
	0x40, 0x48, 0x88, 0x8b, 0x25, 0x20, 0xbf, 0xa8, 0x44, 0x82, 0x59, 0x81, 0x51, 0x83, 0x35, 0x88,
	0xa5, 0x20, 0xbf, 0xa8, 0x44, 0x48, 0x86, 0x8b, 0xd3, 0x23, 0x35, 0xb1, 0xa8, 0x24, 0x29, 0x35,
	0xb1, 0x44, 0x82, 0x05, 0x2c, 0xc1, 0x99, 0x01, 0x13, 0x30, 0xb2, 0xe5, 0xe2, 0xf2, 0x4d, 0xcd,
	0x4d, 0x4a, 0x2d, 0x2a, 0xce, 0xc8, 0x2c, 0x10, 0xd2, 0xe7, 0x62, 0x0d, 0x4e, 0xac, 0xf4, 0xc8,
	0x14, 0x12, 0xd4, 0x83, 0xb9, 0x06, 0x66, 0xb7, 0x14, 0xa6, 0x90, 0x12, 0x43, 0x12, 0x1b, 0xd8,
	0xb1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x48, 0x6e, 0xb0, 0xbd, 0x00, 0x00, 0x00,
}
